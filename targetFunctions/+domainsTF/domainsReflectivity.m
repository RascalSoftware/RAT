function [reflectivity,simulation,shiftedData,backgrounds,resolutions,...
    sldProfiles,layers,resampledLayers,qzshifts,scalefactors,bulkIns,...
    bulkOuts,subRoughs,chis] = domainsReflectivity(problemStruct,controls)
    % This is the main domains reflectivity calculation.
    % It extracts the required parameters for the contrasts
    % from the input arrays, then passes the main calculation to
    % the appropriate core calculation, which carries out the calculation
    % itself. The core layers calculation is common for both standard and
    % custom layers, with an additional core custom XY calculation.

    % Extract parameters from problemStruct
    [numberOfContrasts, geometry, contrastBackgroundIndices,...
     contrastResolutionIndices, backgroundParamValues, resolutionParamValues,...
     qzshifts, scalefactors, bulkIns, bulkOuts, domainRatios, dataPresent,...
     nParams, paramValues, resample, contrastBackgroundTypes, contrastBackgroundActions,...
     contrastResolutionTypes, contrastCustomFiles, useImaginary, repeatLayers,...
     data, dataLimits, simulationLimits, inputContrastLayers, customFiles,...
     domainContrastLayers] = extractProblemParams(problemStruct);
    
    calcSld = controls.calcSldDuringFit;
    parallel = controls.parallel;
    numSimulationPoints = controls.numSimulationPoints;
    resampleMinAngle = controls.resampleMinAngle;
    resampleNPoints = controls.resampleNPoints;
    
    % Allocate the memory for the output arrays before the main loop
    subRoughs = zeros(numberOfContrasts,1);
    chis = zeros(numberOfContrasts,1);
    
    reflectivity = cell(numberOfContrasts,1);   
    simulation = cell(numberOfContrasts,1);
    shiftedData = cell(numberOfContrasts,1);
    backgrounds = cell(numberOfContrasts,1);
    resolutions = cell(numberOfContrasts,1);
    sldProfiles = cell(numberOfContrasts,2);
    layers = cell(numberOfContrasts,2);
    resampledLayers = cell(numberOfContrasts,2);
    
    contrastLayers1 = cell(numberOfContrasts,1);   
    contrastLayers2 = cell(numberOfContrasts,1);

    contrastSlds1 = cell(numberOfContrasts,1);   
    contrastSlds2 = cell(numberOfContrasts,1);

    domainSldProfiles = cell(numberOfContrasts,1);    
    domainLayers = cell(numberOfContrasts,1);
    domainResampledLayers = cell(numberOfContrasts,1);    

    for i = 1:numberOfContrasts

        shiftedData{i} = zeros(1,3);

        backgrounds{i} = zeros(1,3);
        resolutions{i} = zeros(1,2);

        contrastLayers1{i} = zeros(1,6);
        contrastLayers2{i} = zeros(1,6);

        contrastSlds1{i} = zeros(1,3);
        contrastSlds2{i} = zeros(1,3);

        layers{i,1} = zeros(1,6);
        layers{i,2} = zeros(1,6);

        resampledLayers{i,1} = zeros(1,6);
        resampledLayers{i,2} = zeros(1,6);

    end

%% Obtain model specific parameters

    switch lower(problemStruct.modelType)
        
        case coderEnums.modelTypes.StandardLayers

            % First we need to allocate the absolute values of the input
            % parameters to all the layers in the layers list. This only
            % needs to be done once, and so is done outside the contrasts
            % loop
            layerValues = allocateParamsToLayers(paramValues, problemStruct.layersDetails);

            for i = 1:numberOfContrasts

                % Substrate roughness is always first parameter for
                % standard layers
                subRoughs(i) = paramValues(1);
    
                % Also need to determine which layers from the overall
                % layers list are required for this contrast, and put them
                % in the correct order according to geometry. We run it
                % twice, once for each domain
                contrastLayers1{i} = allocateLayersForContrast(...
                    domainContrastLayers{inputContrastLayers{i}(1)}, layerValues);
                contrastLayers2{i} = allocateLayersForContrast(...
                    domainContrastLayers{inputContrastLayers{i}(2)}, layerValues);

            end

        case coderEnums.modelTypes.CustomLayers

            numberOfOutputColumns = 6;
            [contrastLayers1,contrastLayers2,subRoughs...
             ] = domainsTF.processCustomFunction(bulkIns,bulkOuts,...
             contrastCustomFiles,numberOfContrasts,numberOfOutputColumns,...
             customFiles,paramValues,useImaginary);

        case coderEnums.modelTypes.CustomXY

            numberOfOutputColumns = 3;
            [contrastSlds1,contrastSlds2,subRoughs...
             ] = domainsTF.processCustomFunction(bulkIns,bulkOuts,...
             contrastCustomFiles,numberOfContrasts,numberOfOutputColumns,...
             customFiles,paramValues,useImaginary);

       otherwise
            
            coderException(coderEnums.errorCodes.invalidOption, 'The model type "%s" is not supported', problemStruct.modelType);

    end

%% Run the core calculation for each contrast

    if strcmpi(problemStruct.modelType, coderEnums.modelTypes.CustomXY)

        if strcmpi(parallel, coderEnums.parallelOptions.Contrasts)
        
            parfor i = 1:numberOfContrasts

                [backgrounds{i},resolutions{i},shiftedData{i},...
                 simulationXData,dataIndices...
                 ] = setupCoreReflectivityCalculation(...
                 contrastBackgroundIndices{i},contrastResolutionIndices{i},...
                 backgroundParamValues,resolutionParamValues,...
                 contrastBackgroundTypes{i},contrastResolutionTypes{i},...
                 customFiles,qzshifts(i),scalefactors(i),dataPresent(i),...
                 data{i},dataLimits{i},simulationLimits{i},numSimulationPoints);
        
                [reflectivity{i},simulation{i},shiftedData{i},...
                 domainSldProfiles{i},domainLayers{i},...
                 domainResampledLayers{i},chis(i)...
                 ] = contrastCustomXYCalculation(bulkIns(i),bulkOuts(i),...
                 domainRatios(i),shiftedData{i},simulationXData,dataIndices,...
                 backgrounds{i},resolutions{i},contrastBackgroundActions{i},...
                 nParams,parallel,resampleMinAngle,resampleNPoints,...
                 subRoughs(i),contrastSlds1{i},contrastSlds2{i});
    
            end
        
        else
            
            for i = 1:numberOfContrasts

                [backgrounds{i},resolutions{i},shiftedData{i},...
                 simulationXData,dataIndices...
                 ] = setupCoreReflectivityCalculation(...
                 contrastBackgroundIndices{i},contrastResolutionIndices{i},...
                 backgroundParamValues,resolutionParamValues,...
                 contrastBackgroundTypes{i},contrastResolutionTypes{i},...
                 customFiles,qzshifts(i),scalefactors(i),dataPresent(i),...
                 data{i},dataLimits{i},simulationLimits{i},numSimulationPoints);
                
                [reflectivity{i},simulation{i},shiftedData{i},...
                 domainSldProfiles{i},domainLayers{i},...
                 domainResampledLayers{i},chis(i)...
                 ] = contrastCustomXYCalculation(bulkIns(i),bulkOuts(i),...
                 domainRatios(i),shiftedData{i},simulationXData,dataIndices,...
                 backgrounds{i},resolutions{i},contrastBackgroundActions{i},...
                 nParams,parallel,resampleMinAngle,resampleNPoints,...
                 subRoughs(i),contrastSlds1{i},contrastSlds2{i});
    
            end
        
        end

    else

        if strcmpi(parallel, coderEnums.parallelOptions.Contrasts)
        
            parfor i = 1:numberOfContrasts
    
                [backgrounds{i},resolutions{i},shiftedData{i},...
                 simulationXData,dataIndices...
                 ] = setupCoreReflectivityCalculation(...
                 contrastBackgroundIndices{i},contrastResolutionIndices{i},...
                 backgroundParamValues,resolutionParamValues,...
                 contrastBackgroundTypes{i},contrastResolutionTypes{i},...
                 customFiles,qzshifts(i),scalefactors(i),dataPresent(i),...
                 data{i},dataLimits{i},simulationLimits{i},numSimulationPoints);
            
                [reflectivity{i},simulation{i},shiftedData{i},...
                 domainSldProfiles{i},domainLayers{i},domainResampledLayers{i},...
                 chis(i)] = contrastLayersCalculation(bulkIns(i),bulkOuts(i),...
                 domainRatios(i),shiftedData{i},simulationXData,dataIndices,...
                 backgrounds{i},resolutions{i},repeatLayers(i),...
                 contrastBackgroundActions{i},nParams,parallel,...
                 resampleMinAngle,resampleNPoints,resample(i),...
                 geometry,subRoughs(i),calcSld,contrastLayers1{i},...
                 contrastLayers2{i});
        
            end
        
        else
        
            for i = 1:numberOfContrasts
    
                [backgrounds{i},resolutions{i},shiftedData{i},...
                 simulationXData,dataIndices...
                 ] = setupCoreReflectivityCalculation(...
                 contrastBackgroundIndices{i},contrastResolutionIndices{i},...
                 backgroundParamValues,resolutionParamValues,...
                 contrastBackgroundTypes{i},contrastResolutionTypes{i},...
                 customFiles,qzshifts(i),scalefactors(i),dataPresent(i),...
                 data{i},dataLimits{i},simulationLimits{i},numSimulationPoints);
    
                [reflectivity{i},simulation{i},shiftedData{i},...
                 domainSldProfiles{i},domainLayers{i},domainResampledLayers{i},...
                 chis(i)] = contrastLayersCalculation(bulkIns(i),bulkOuts(i),...
                 domainRatios(i),shiftedData{i},simulationXData,dataIndices,...
                 backgrounds{i},resolutions{i},repeatLayers(i),...
                 contrastBackgroundActions{i},nParams,parallel,resampleMinAngle,...
                 resampleNPoints,resample(i),geometry,subRoughs(i),calcSld,...
                 contrastLayers1{i},contrastLayers2{i});
    
            end
        
        end

    end
    
    for i = 1:numberOfContrasts
        for j = 1:2
            sldProfiles{i,j} = domainSldProfiles{i}{j};
            layers{i,j} = domainLayers{i}{j};
            resampledLayers{i,j} = domainResampledLayers{i}{j};
        end
    end

    % Remove dummy imaginary column if present
    if ~useImaginary
        for i=1:numberOfContrasts
            for j = 1:2
                layers{i,j}(:,3) = [];
                resampledLayers{i,j}(:,3) = [];
            end
        end
    end

end


function [reflectivity,simulation,shiftedData,sldProfile,layers,...
    resampledLayers,chi] = contrastLayersCalculation(...
    bulkIn,bulkOut,domainRatio,shiftedData,simulationXData,dataIndices,...
    background,resolution,repeatLayers,backgroundAction,nParams,parallel,...
    resampleMinAngle,resampleNPoints,resample,geometry,roughness,calcSld,...
    contrastLayers1,contrastLayers2)
          
    % Call the core layers calculation once for each domain
    [reflectivity1,simulation1,~,sldProfile1,layers1,resampledLayers1,~...
     ] = coreLayersCalculation(contrastLayers1,roughness,geometry,...
     bulkIn,bulkOut,resample,calcSld,shiftedData,simulationXData,dataIndices,...
     repeatLayers,background,resolution,backgroundAction,parallel,...
     resampleMinAngle,resampleNPoints,nParams);

    [reflectivity2,simulation2,shiftedData,sldProfile2,layers2,resampledLayers2,~...
     ] = coreLayersCalculation(contrastLayers2,roughness,geometry,...
     bulkIn,bulkOut,resample,calcSld,shiftedData,simulationXData,dataIndices,...
     repeatLayers,background,resolution,backgroundAction,parallel,...
     resampleMinAngle,resampleNPoints,nParams);
    
    % Calculate the average reflectivities
    [reflectivity,simulation] = domainsTF.averageReflectivity(...
        reflectivity1,reflectivity2,simulation1,simulation2,domainRatio);

    % Get an overall chi-squared for the new averaged curve
    chi = chiSquared(shiftedData,reflectivity,nParams);

    % Store returned values for this contrast in the output arrays
    sldProfile = {sldProfile1, sldProfile2};
    layers = {layers1, layers2};
    resampledLayers = {resampledLayers1, resampledLayers2};

end

function [reflectivity,simulation,shiftedData,sldProfile,layers,...
    resampledLayers,chi] = contrastCustomXYCalculation(...
    bulkIn,bulkOut,domainRatio,shiftedData,simulationXData,dataIndices,...
    background,resolution,backgroundAction,nParams,parallel,...
    resampleMinAngle,resampleNPoints,roughness,contrastSld1,contrastSld2)

    % Call the core custom XY calculation once for each domain
    [reflectivity1,simulation1,~,...
     sldProfile1,layers1,resampledLayers1,~...
     ] = coreCustomXYCalculation(bulkIn,bulkOut,...
     shiftedData,simulationXData,dataIndices,...
     background,resolution,backgroundAction,...
     parallel,resampleMinAngle,resampleNPoints,roughness,contrastSld1,nParams);

    [reflectivity2,simulation2,shiftedData,...
     sldProfile2,layers2,resampledLayers2,~...
     ] = coreCustomXYCalculation(bulkIn,bulkOut,...
     shiftedData,simulationXData,dataIndices,...
     background,resolution,backgroundAction,...
     parallel,resampleMinAngle,resampleNPoints,roughness,contrastSld2,nParams);
                
     % Calculate the average reflectivities
    [reflectivity,simulation] = domainsTF.averageReflectivity(...
        reflectivity1,reflectivity2,simulation1,simulation2,domainRatio);

    % Get an overall chi-squared for the new averaged curve
    chi = chiSquared(shiftedData,reflectivity,nParams);

    % Store returned values for this contrast in the output arrays
    sldProfile = {sldProfile1, sldProfile2};
    layers = {layers1, layers2};
    resampledLayers = {resampledLayers1, resampledLayers2};

end

function [qzshifts,scalefactors,bulkIns,bulkOuts,chis,reflectivity,...
    simulation,shiftedData,backgrounds,resolutions,sldProfiles,layers,...
    resampledLayers,subRoughs] = standardLayers(problemStruct,controls)
    % This is the main reflectivity calculation of the standard layers
    % calculation type. It extracts the required parameters for the contrasts
    % from the input arrays, then passes the main calculation to
    % 'coreLayersCalculation', which carries out the calculation itself. 
    % The core calculation is common for both standard and custom layers.

    % Extract parameters from problemStruct
    [numberOfContrasts, geometry, contrastBackgroundIndices, contrastQzshiftIndices,...
     contrastScalefactorIndices, contrastBulkInIndices, contrastBulkOutIndices,...
     contrastResolutionIndices, ~, backgroundParamValues, qzshiftValues,...
     scalefactorValues, bulkInValues, bulkOutValues, resolutionParamValues,...
     ~, dataPresent, nParams, paramValues, ~, resample, contrastBackgroundTypes,...
     contrastBackgroundActions, contrastResolutionTypes, contrastCustomFiles,...
     useImaginary, repeatLayers, data, dataLimits, simulationLimits, ...
     contrastLayersIndices, layersDetails, customFiles, ~...
     ] = extractProblemParams(problemStruct);
    
    calcSld = controls.calcSldDuringFit;
    parallel = controls.parallel;
    numSimulationPoints = controls.numSimulationPoints;
    resampleMinAngle = controls.resampleMinAngle;
    resampleNPoints = controls.resampleNPoints;
    
    % Allocate the memory for the output arrays before the main loop
    qzshifts = zeros(numberOfContrasts,1);
    scalefactors = zeros(numberOfContrasts,1);
    bulkIns = zeros(numberOfContrasts,1);
    bulkOuts = zeros(numberOfContrasts,1);
    chis = zeros(numberOfContrasts,1);
    subRoughs = zeros(numberOfContrasts,1);
    
    reflectivity = cell(numberOfContrasts,1);  
    simulation = cell(numberOfContrasts,1);
    shiftedData = cell(numberOfContrasts,1);
    backgrounds = cell(numberOfContrasts,1);
    resolutions = cell(numberOfContrasts,1);
    sldProfiles = cell(numberOfContrasts,1);
    layers = cell(numberOfContrasts,1);
    resampledLayers = cell(numberOfContrasts,1);

    % Extract the relevant parameter values for this contrast
    % from the input arrays.
    % First need to decide which values of the data shifts, scalefactors,
    % and bulk contrasts are associated with this contrast
    for i = 1:numberOfContrasts
        [qzshifts(i),scalefactors(i),bulkIns(i),bulkOuts(i)] = backSort( ...
            contrastQzshiftIndices(i),contrastScalefactorIndices(i),...
            contrastBulkInIndices(i),contrastBulkOutIndices(i),...
            qzshiftValues,scalefactorValues,bulkInValues,bulkOutValues);
    end
    
    switch lower(problemStruct.modelType)
        
        case coderEnums.modelTypes.StandardLayers

            % First we need to allocate the absolute values of the input
            % parameters to all the layers in the layers list. This only needs
            % to be done once, and so is done outside the contrasts loop
            layerValues = allocateParamsToLayers(paramValues, layersDetails);
            
            contrastLayers = cell(numberOfContrasts,1);
            for i = 1:numberOfContrasts
    
                % Substrate roughness is always first parameter for
                % standard layers
                subRoughs(i) = paramValues(1);
    
                % Also need to determine which layers from the overall layers
                % list are required for this contrast, and put them in the 
                % correct order according to geometry
                layerIndices = contrastLayersIndices{i};
                contrastLayers{i} = zeros(length(layerIndices), 6);
                for j = 1:length(layerIndices)
                    contrastLayers{i}(j,:) = layerValues{layerIndices(j)};
                end
    
            end

        case coderEnums.modelTypes.CustomLayers

            % Process the custom models
            numberOfOutputColumns = 6;
            [contrastLayers,subRoughs] = normalTF.processCustomFunction(contrastBulkInIndices,contrastBulkOutIndices,...
                bulkInValues,bulkOutValues,contrastCustomFiles,numberOfContrasts,numberOfOutputColumns,customFiles,paramValues,useImaginary);

        case coderEnums.modelTypes.CustomXY

            % Process the custom models
            numberOfOutputColumns = 3;
            [slds,subRoughs] = normalTF.processCustomFunction(contrastBulkInIndices,...
                contrastBulkOutIndices,bulkInValues,bulkOutValues,...
                contrastCustomFiles,numberOfContrasts,numberOfOutputColumns,...
                customFiles,paramValues,useImaginary);

        otherwise
            coderException(coderEnums.errorCodes.invalidOption, 'The model type "%s" is not supported', problemStruct.modelType);

    end
    
    if strcmpi(problemStruct.modelType, coderEnums.modelTypes.CustomXY)

        if strcmpi(parallel, coderEnums.parallelOptions.Contrasts)
        
            % Loop over all the contrasts
            parfor i = 1:numberOfContrasts
        
                [chis(i),...
                 reflectivity{i},simulation{i},shiftedData{i},backgrounds{i},...
                 resolutions{i},sldProfiles{i},layers{i},resampledLayers{i}...
                 ] = customXYContrastCalculation(contrastBackgroundIndices{i},...
                 contrastResolutionIndices{i},backgroundParamValues,resolutionParamValues,...
                 qzshifts(i),scalefactors(i),bulkIns(i),bulkOuts(i),...
                 dataPresent(i),data{i},dataLimits{i},simulationLimits{i},...
                 contrastBackgroundTypes{i},contrastBackgroundActions{i},...
                 contrastResolutionTypes{i},customFiles,nParams,parallel,...
                 numSimulationPoints,resampleMinAngle,resampleNPoints,...
                 subRoughs(i),slds{i});

            end
            
        else
        
            % Loop over all the contrasts
            for i = 1:numberOfContrasts
                
                [chis(i),...
                 reflectivity{i},simulation{i},shiftedData{i},backgrounds{i},...
                 resolutions{i},sldProfiles{i},layers{i},resampledLayers{i}...
                 ] = customXYContrastCalculation(contrastBackgroundIndices{i},...
                 contrastResolutionIndices{i},backgroundParamValues,resolutionParamValues,...
                 qzshifts(i),scalefactors(i),bulkIns(i),bulkOuts(i),...
                 dataPresent(i),data{i},dataLimits{i},simulationLimits{i},...
                 contrastBackgroundTypes{i},contrastBackgroundActions{i},...
                 contrastResolutionTypes{i},customFiles,nParams,parallel,...
                 numSimulationPoints,resampleMinAngle,resampleNPoints,...
                 subRoughs(i),slds{i});
    
            end
        end

    else
    
        if strcmpi(parallel, coderEnums.parallelOptions.Contrasts)
        
            % Loop over all the contrasts
            parfor i = 1:numberOfContrasts
        
                [chis(i),...
                 reflectivity{i},simulation{i},shiftedData{i},backgrounds{i},...
                 resolutions{i},sldProfiles{i},layers{i},resampledLayers{i}...
                 ] = layersContrastCalculation(contrastBackgroundIndices{i},...
                 contrastResolutionIndices{i},backgroundParamValues,resolutionParamValues,...
                 qzshifts(i),scalefactors(i),bulkIns(i),bulkOuts(i),...
                 dataPresent(i),data{i},dataLimits{i},simulationLimits{i},repeatLayers(i),...
                 contrastBackgroundTypes{i},contrastBackgroundActions{i},...
                 contrastResolutionTypes{i},customFiles,nParams,parallel,...
                 numSimulationPoints,resampleMinAngle,resampleNPoints,resample(i),...
                 geometry,subRoughs(i),calcSld,contrastLayers{i});
        
            end
            
        else
        
            % Loop over all the contrasts
            for i = 1:numberOfContrasts
                
                [chis(i),...
                 reflectivity{i},simulation{i},shiftedData{i},backgrounds{i},...
                 resolutions{i},sldProfiles{i},layers{i},resampledLayers{i}...
                 ] = layersContrastCalculation(contrastBackgroundIndices{i},...
                 contrastResolutionIndices{i},backgroundParamValues,resolutionParamValues,...
                 qzshifts(i),scalefactors(i),bulkIns(i),bulkOuts(i),...
                 dataPresent(i),data{i},dataLimits{i},simulationLimits{i},repeatLayers(i),...
                 contrastBackgroundTypes{i},contrastBackgroundActions{i},...
                 contrastResolutionTypes{i},customFiles,nParams,parallel,...
                 numSimulationPoints,resampleMinAngle,resampleNPoints,resample(i),...
                 geometry,subRoughs(i),calcSld,contrastLayers{i});
    
            end
        end
    end

    % Remove dummy imaginary column if present
    if ~useImaginary
        for i=1:numberOfContrasts
            layers{i}(:,3) = [];
            resampledLayers{i}(:,3) = [];
        end
    end

end


function [chi,reflectivity,simulation,...
    shiftedData,background,resolution,sldProfile,layers,...
    resampledLayers] = layersContrastCalculation(backgroundParamIndex,resolutionParamIndex,...
    backgroundParams,resolutionParams,qzshift,scalefactor,bulkIn,bulkOut,...
    dataPresent,data,dataLimits,...
    simulationLimits,repeatLayers,backgroundType,backgroundAction,...
    resolutionType,customFiles,nParams,parallel,numSimulationPoints,...
    resampleMinAngle,resampleNPoints,resample,geometry,roughness,calcSld,...
    contrastLayers)

    [background,resolution,shiftedData,simulationXData, dataIndices...
    ] = setupCalculation(backgroundParamIndex,...
    resolutionParamIndex,backgroundParams,resolutionParams,qzshift,scalefactor,...
    dataPresent,data,dataLimits,simulationLimits,...
    backgroundType,resolutionType,customFiles,numSimulationPoints);

    % Call the core layers calculation
    [reflectivity,simulation,shiftedData,sldProfile,layers,...
        resampledLayers] = normalTF.coreLayersCalculation(contrastLayers,roughness,...
        geometry,bulkIn,bulkOut,resample,calcSld,shiftedData,simulationXData,dataIndices,repeatLayers,...
        resolution,background,backgroundAction,parallel,resampleMinAngle,resampleNPoints);

    % Calculate chi squared
    chi = chiSquared(shiftedData,reflectivity,nParams);

end

function [chi,reflectivity,simulation,...
    shiftedData,background,resolution,sldProfile,layers,...
    resampledLayers] = customXYContrastCalculation(backgroundParamIndex,...
    resolutionParamIndex,backgroundParams,resolutionParams,qzshift,scalefactor,bulkIn,bulkOut,...
    dataPresent,data,dataLimits,simulationLimits,...
    backgroundType,backgroundAction,resolutionType,customFiles,nParams,...
    parallel,numSimulationPoints,resampleMinAngle,resampleNPoints,roughness,...
    sld)

    [background,resolution,shiftedData,simulationXData, dataIndices...
    ] = setupCalculation(backgroundParamIndex,...
    resolutionParamIndex,backgroundParams,resolutionParams,qzshift,scalefactor,...
    dataPresent,data,dataLimits,simulationLimits,...
    backgroundType,resolutionType,customFiles,numSimulationPoints);

    % Resample the layers
    sldProfile = sld(:,[1,2]);
    sldProfileIm = sld(:,[1,3]);
    resampledLayers = resampleLayers(sldProfile,sldProfileIm,resampleMinAngle,resampleNPoints);
    
    layers = resampledLayers;

    reflectivityType = 'standardAbeles';
    [reflectivity,simulation] = callReflectivity(bulkIn,bulkOut,simulationXData,dataIndices,1,layers,roughness,resolution,parallel,reflectivityType);

    [reflectivity,simulation,shiftedData] = applyBackgroundCorrection(reflectivity,simulation,shiftedData,background,backgroundAction);
    
    chi = chiSquared(shiftedData,reflectivity,nParams);

end

function [background,resolution,shiftedData,simulationXData, dataIndices...
    ] = setupCalculation(backgroundParamIndex,...
    resolutionParamIndex,backgroundParams,resolutionParams,qzshift,scalefactor,...
    dataPresent,data,dataLimits,simulationLimits,...
    backgroundType,resolutionType,customFiles,numSimulationPoints)
   
    % Apply scale factors and q shifts to the data
    shiftedData = shiftData(scalefactor,qzshift,dataPresent,data,dataLimits,simulationLimits,numSimulationPoints);
    [simulationXData, dataIndices] = makeSimulationRange(shiftedData, simulationLimits);

    background = constructBackground(backgroundType,backgroundParamIndex,...
        shiftedData,customFiles,backgroundParams,simulationXData,dataIndices);
    resolution = constructResolution(resolutionType,resolutionParamIndex,...
        shiftedData,customFiles,resolutionParams,simulationXData,dataIndices);

end
